{"version":3,"sources":["../src/helper-functions.js"],"names":["dateTime","input","formatInput","parseRegExp","strPattern","parts","exec","RegExp","_","escapeRegExp","wrapText","str","opt_max","Math","min","max","rgx","lastPart","wasNotWS","match","reduce","lines","part","partIndex","isNotWS","test","lineCount","length","lastLine","newLastLine","join","module","exports"],"mappings":";;AAAA;;AACA;;;;AAEA,SAASA,QAAT,CAAkBC,KAAlB,EAAyBC,WAAzB,EAAsC;AACpC,SAAO,qBAAOD,KAAP,EAAcC,WAAd,CAAP;AACD;;AAED,SAASC,WAAT,CAAqBC,UAArB,EAAiC;AAC/B,MAAIC,KAAK,GAAG,kBAAkBC,IAAlB,CAAuBF,UAAvB,CAAZ;AACA,SAAOC,KAAK,GAAG,IAAIE,MAAJ,CAAWF,KAAK,CAAC,CAAD,CAAhB,EAAqBA,KAAK,CAAC,CAAD,CAA1B,CAAH,GAAoC,IAAIE,MAAJ,YAAeC,gBAAEC,YAAF,CAAeL,UAAf,CAAf,QAA8C,GAA9C,CAAhD;AACD;AAED;;;;;AAGA,SAASM,QAAT,CAAkBC,GAAlB,EAAuBC,OAAvB,EAAgC;AAC9BA,EAAAA,OAAO,GAAGC,IAAI,CAACC,GAAL,CAASD,IAAI,CAACE,GAAL,CAAS,CAAT,EAAY,CAAC,CAACH,OAAF,IAAa,EAAzB,CAAT,EAAuC,GAAvC,CAAV;AACA,MAAII,GAAG,GAAG,IAAIT,MAAJ,iBAAoBK,OAApB,qBAAsCA,OAAtC,QAAkD,GAAlD,CAAV;AACA,MAAIK,QAAJ,EAAcC,QAAd;AACA,SAAO,CAACP,GAAG,CAACQ,KAAJ,CAAUH,GAAV,KAAkB,EAAnB,EAAuBI,MAAvB,CAA8B,UAAUC,KAAV,EAAiBC,IAAjB,EAAuBC,SAAvB,EAAkClB,KAAlC,EAAyC;AAC5E,QAAImB,OAAO,GAAG,KAAKC,IAAL,CAAUH,IAAV,CAAd;;AACA,QAAIE,OAAJ,EAAa;AACX,UAAIE,SAAS,GAAGL,KAAK,CAACM,MAAtB;AACA,UAAIC,QAAQ,GAAGP,KAAK,CAACK,SAAS,GAAG,CAAb,CAApB;AACA,UAAIG,WAAJ;;AACA,UAAIN,SAAS,GAAG,CAAZ,IAAiB,CAACM,WAAW,GAAGD,QAAQ,IAAIV,QAAQ,GAAG,EAAH,GAAQD,QAApB,CAAR,GAAwCK,IAAvD,EAA6DK,MAA7D,IAAuEf,OAA5F,EAAqG;AACnGS,QAAAA,KAAK,CAACK,SAAS,GAAG,CAAb,CAAL,GAAuBG,WAAvB;AACD,OAFD,MAGK;AACHR,QAAAA,KAAK,CAACK,SAAD,CAAL,GAAmBJ,IAAnB;AACD;AACF;;AACDL,IAAAA,QAAQ,GAAGK,IAAX;AACAJ,IAAAA,QAAQ,GAAGM,OAAX;AAEA,WAAOH,KAAP;AACD,GAjBM,EAiBJ,EAjBI,EAiBAS,IAjBA,CAiBK,MAjBL,CAAP;AAkBD;;AAEDC,MAAM,CAACC,OAAP,GAAiB;AAAEhC,EAAAA,QAAQ,EAARA,QAAF;AAAYG,EAAAA,WAAW,EAAXA,WAAZ;AAAyBO,EAAAA,QAAQ,EAARA;AAAzB,CAAjB","sourcesContent":["import moment from 'moment';\nimport _ from 'lodash';\n\nfunction dateTime(input, formatInput) {\n  return moment(input, formatInput);\n}\n\nfunction parseRegExp(strPattern) {\n  let parts = /^\\/(.+)\\/(\\w*)$/.exec(strPattern);\n  return parts ? new RegExp(parts[1], parts[2]) : new RegExp(`^${_.escapeRegExp(strPattern)}$`, 'i');\n}\n\n/**\n * {@link https://gist.github.com/westc/d9230bf447a551d2b21d2c595fcde46d}\n */\nfunction wrapText(str, opt_max) {\n  opt_max = Math.min(Math.max(1, ~~opt_max || 80), 200);\n  let rgx = new RegExp(`\\\\S{1,${opt_max}}|\\\\s{1,${opt_max}}`, 'g');\n  let lastPart, wasNotWS;\n  return (str.match(rgx) || []).reduce(function (lines, part, partIndex, parts) {\n    let isNotWS = /\\S/.test(part);\n    if (isNotWS) {\n      let lineCount = lines.length;\n      let lastLine = lines[lineCount - 1];\n      let newLastLine;\n      if (partIndex > 0 && (newLastLine = lastLine + (wasNotWS ? '' : lastPart) + part).length <= opt_max) {\n        lines[lineCount - 1] = newLastLine;\n      }\n      else {\n        lines[lineCount] = part;\n      }\n    }\n    lastPart = part;\n    wasNotWS = isNotWS;\n\n    return lines;\n  }, []).join('\\r\\n');\n}\n\nmodule.exports = { dateTime, parseRegExp, wrapText };"],"file":"helper-functions.js"}